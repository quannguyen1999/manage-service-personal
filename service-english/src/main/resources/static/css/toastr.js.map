{
version: 3,
sources: [
"toastr.js"
],
names: [
"define",
"$",
"error",
"message",
"title",
"optionsOverride",
"notify",
"type",
"toastType",
"iconClass",
"getOptions",
"iconClasses",
"getContainer",
"options",
"create",
"$container",
"containerId",
"length",
"createContainer",
"info",
"subscribe",
"callback",
"listener",
"success",
"warning",
"clear",
"$toastElement",
"clearOptions",
"clearToast",
"clearContainer",
"remove",
"removeToast",
"children",
"toastsToClear",
"i",
"force",
"hideMethod",
"duration",
"hideDuration",
"easing",
"hideEasing",
"complete",
"attr",
"addClass",
"positionClass",
"appendTo",
"target",
"getDefaults",
"tapToDismiss",
"toastClass",
"debug",
"showMethod",
"showDuration",
"showEasing",
"onShown",
"undefined",
"onHidden",
"closeMethod",
"closeDuration",
"closeEasing",
"extendedTimeOut",
"timeOut",
"titleClass",
"messageClass",
"escapeHtml",
"closeHtml",
"newestOnTop",
"preventDuplicates",
"progressBar",
"publish",
"args",
"map",
"source",
"String",
"replace",
"personalizeToast",
"setIcon",
"setTitle",
"setMessage",
"setCloseButton",
"setProgressBar",
"setSequence",
"handleEvents",
"hover",
"stickAround",
"delayedHideToast",
"onclick",
"click",
"hideToast",
"closeButton",
"$closeElement",
"event",
"stopPropagation",
"cancelBubble",
"displayToast",
"hide",
"intervalId",
"setTimeout",
"maxHideTime",
"parseFloat",
"hideEta",
"Date",
"getTime",
"setInterval",
"updateProgress",
"prepend",
"append",
"$titleElement",
"$messageElement",
"$progressElement",
"shouldExit",
"previousToast",
"override",
"method",
"clearTimeout",
"response",
"state",
"endTime",
"stop",
"percentage",
"width",
"extend",
"toastId",
"startTime",
"console",
"log",
"toastr",
"is",
"version",
"amd",
"deps",
"factory",
"module",
"exports",
"require",
"window",
"jQuery"
],
mappings: "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",
file: "toastr.js",
sourcesContent: [
"/* * Toastr * Copyright 2012-2015 * Authors: John Papa, Hans FjÃ¤llemark, and Tim Ferrell. * All Rights Reserved. * Use, reproduction, distribution, and modification of this code is subject to the terms and * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php * * ARIA Support: Greta Krafsig * * Project: https://github.com/CodeSeven/toastr */ /* global define */ ; (function (define) { define(['jquery'], function ($) { return (function () { var $container; var listener; var toastId = 0; var toastType = { error: 'error', info: 'info', success: 'success', warning: 'warning' }; var toastr = { clear: clear, remove: remove, error: error, getContainer: getContainer, info: info, options: {}, subscribe: subscribe, success: success, version: '2.1.2', warning: warning }; var previousToast; return toastr; //////////////// function error(message, title, optionsOverride) { return notify({ type: toastType.error, iconClass: getOptions().iconClasses.error, message: message, optionsOverride: optionsOverride, title: title }); } function getContainer(options, create) { if (!options) { options = getOptions(); } $container = $('#' + options.containerId); if ($container.length) { return $container; } if (create) { $container = createContainer(options); } return $container; } function info(message, title, optionsOverride) { return notify({ type: toastType.info, iconClass: getOptions().iconClasses.info, message: message, optionsOverride: optionsOverride, title: title }); } function subscribe(callback) { listener = callback; } function success(message, title, optionsOverride) { return notify({ type: toastType.success, iconClass: getOptions().iconClasses.success, message: message, optionsOverride: optionsOverride, title: title }); } function warning(message, title, optionsOverride) { return notify({ type: toastType.warning, iconClass: getOptions().iconClasses.warning, message: message, optionsOverride: optionsOverride, title: title }); } function clear($toastElement, clearOptions) { var options = getOptions(); if (!$container) { getContainer(options); } if (!clearToast($toastElement, options, clearOptions)) { clearContainer(options); } } function remove($toastElement) { var options = getOptions(); if (!$container) { getContainer(options); } if ($toastElement && $(':focus', $toastElement).length === 0) { removeToast($toastElement); return; } if ($container.children().length) { $container.remove(); } } // internal functions function clearContainer (options) { var toastsToClear = $container.children(); for (var i = toastsToClear.length - 1; i >= 0; i--) { clearToast($(toastsToClear[i]), options); } } function clearToast ($toastElement, options, clearOptions) { var force = clearOptions && clearOptions.force ? clearOptions.force : false; if ($toastElement && (force || $(':focus', $toastElement).length === 0)) { $toastElement[options.hideMethod]({ duration: options.hideDuration, easing: options.hideEasing, complete: function () { removeToast($toastElement); } }); return true; } return false; } function createContainer(options) { $container = $('<div/>') .attr('id', options.containerId) .addClass(options.positionClass) .attr('aria-live', 'polite') .attr('role', 'alert'); $container.appendTo($(options.target)); return $container; } function getDefaults() { return { tapToDismiss: true, toastClass: 'toast', containerId: 'toast-container', debug: false, showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery showDuration: 300, showEasing: 'swing', //swing and linear are built into jQuery onShown: undefined, hideMethod: 'fadeOut', hideDuration: 1000, hideEasing: 'swing', onHidden: undefined, closeMethod: false, closeDuration: false, closeEasing: false, extendedTimeOut: 1000, iconClasses: { error: 'toast-error', info: 'toast-info', success: 'toast-success', warning: 'toast-warning' }, iconClass: 'toast-info', positionClass: 'toast-top-right', timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky titleClass: 'toast-title', messageClass: 'toast-message', escapeHtml: false, target: 'body', closeHtml: '<button type="button">&times;</button>', newestOnTop: true, preventDuplicates: false, progressBar: false }; } function publish(args) { if (!listener) { return; } listener(args); } function notify(map) { var options = getOptions(); var iconClass = map.iconClass || options.iconClass; if (typeof (map.optionsOverride) !== 'undefined') { options = $.extend(options, map.optionsOverride); iconClass = map.optionsOverride.iconClass || iconClass; } if (shouldExit(options, map)) { return; } toastId++; $container = getContainer(options, true); var intervalId = null; var $toastElement = $('<div/>'); var $titleElement = $('<div/>'); var $messageElement = $('<div/>'); var $progressElement = $('<div/>'); var $closeElement = $(options.closeHtml); var progressBar = { intervalId: null, hideEta: null, maxHideTime: null }; var response = { toastId: toastId, state: 'visible', startTime: new Date(), options: options, map: map }; personalizeToast(); displayToast(); handleEvents(); publish(response); if (options.debug && console) { console.log(response); } return $toastElement; function escapeHtml(source) { if (source == null) source = ""; return new String(source) .replace(/&/g, '&amp;') .replace(/"/g, '&quot;') .replace(/'/g, '&#39;') .replace(/</g, '&lt;') .replace(/>/g, '&gt;'); } function personalizeToast() { setIcon(); setTitle(); setMessage(); setCloseButton(); setProgressBar(); setSequence(); } function handleEvents() { $toastElement.hover(stickAround, delayedHideToast); if (!options.onclick && options.tapToDismiss) { $toastElement.click(hideToast); } if (options.closeButton && $closeElement) { $closeElement.click(function (event) { if (event.stopPropagation) { event.stopPropagation(); } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) { event.cancelBubble = true; } hideToast(true); }); } if (options.onclick) { $toastElement.click(function (event) { options.onclick(event); hideToast(); }); } } function displayToast() { $toastElement.hide(); $toastElement[options.showMethod]( {duration: options.showDuration, easing: options.showEasing, complete: options.onShown} ); if (options.timeOut > 0) { intervalId = setTimeout(hideToast, options.timeOut); progressBar.maxHideTime = parseFloat(options.timeOut); progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime; if (options.progressBar) { progressBar.intervalId = setInterval(updateProgress, 10); } } } function setIcon() { if (map.iconClass) { $toastElement.addClass(options.toastClass).addClass(iconClass); } } function setSequence() { if (options.newestOnTop) { $container.prepend($toastElement); } else { $container.append($toastElement); } } function setTitle() { if (map.title) { $titleElement.append(!options.escapeHtml ? map.title : escapeHtml(map.title)).addClass(options.titleClass); $toastElement.append($titleElement); } } function setMessage() { if (map.message) { $messageElement.append(!options.escapeHtml ? map.message : escapeHtml(map.message)).addClass(options.messageClass); $toastElement.append($messageElement); } } function setCloseButton() { if (options.closeButton) { $closeElement.addClass('toast-close-button').attr('role', 'button'); $toastElement.prepend($closeElement); } } function setProgressBar() { if (options.progressBar) { $progressElement.addClass('toast-progress'); $toastElement.prepend($progressElement); } } function shouldExit(options, map) { if (options.preventDuplicates) { if (map.message === previousToast) { return true; } else { previousToast = map.message; } } return false; } function hideToast(override) { var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod; var duration = override && options.closeDuration !== false ? options.closeDuration : options.hideDuration; var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing; if ($(':focus', $toastElement).length && !override) { return; } clearTimeout(progressBar.intervalId); return $toastElement[method]({ duration: duration, easing: easing, complete: function () { removeToast($toastElement); if (options.onHidden && response.state !== 'hidden') { options.onHidden(); } response.state = 'hidden'; response.endTime = new Date(); publish(response); } }); } function delayedHideToast() { if (options.timeOut > 0 || options.extendedTimeOut > 0) { intervalId = setTimeout(hideToast, options.extendedTimeOut); progressBar.maxHideTime = parseFloat(options.extendedTimeOut); progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime; } } function stickAround() { clearTimeout(intervalId); progressBar.hideEta = 0; $toastElement.stop(true, true)[options.showMethod]( {duration: options.showDuration, easing: options.showEasing} ); } function updateProgress() { var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100; $progressElement.width(percentage + '%'); } } function getOptions() { return $.extend({}, getDefaults(), toastr.options); } function removeToast($toastElement) { if (!$container) { $container = getContainer(); } if ($toastElement.is(':visible')) { return; } $toastElement.remove(); $toastElement = null; if ($container.children().length === 0) { $container.remove(); previousToast = undefined; } } })(); }); }(typeof define === 'function' && define.amd ? define : function (deps, factory) { if (typeof module !== 'undefined' && module.exports) { //Node module.exports = factory(require('jquery')); } else { window.toastr = factory(window.jQuery); } })); "
],
sourceRoot: "/source/"
}